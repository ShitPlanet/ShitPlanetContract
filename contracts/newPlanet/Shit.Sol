// SPDX-License-Identifier: MIT

pragma solidity ^0.6.2;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/utils/Address.sol";

contract Shit is ERC20{
    
    using Address for address;
    
    address public governance;
    mapping (address => bool) public shitTokens;
    mapping (address => address) public bridges;
    
    address[] public shitTokenList;
    
    uint256[] public rangeValue = [1, 10, 100, 1000, 10000, 100000];

    constructor() public ERC20("ShitPlanet","SHIT"){
        governance = tx.origin;
        _mint(msg.sender, 100000000000000000000000000);
    }
    
    function addShitToken(address tokenAddress, address bridge) public {
      require(msg.sender == governance, "!governance");
      shitTokens[tokenAddress] = true;
      bridges[tokenAddress] = bridge;
      shitTokenList.push(tokenAddress);
    }
    
    function getShitTokenList() public view returns(address[] memory) {
      return shitTokenList;
    }
    
    function getBridgeToken(address tokenAddress) public view returns(address) {
      return bridges[tokenAddress];
    }
    
    function removeShitToken(address tokenAddress) public {
      require(msg.sender == governance, "!governance");
      shitTokens[tokenAddress] = false;
      bridges[tokenAddress] = address(0);
    }
    
    function isShitToken(address tokenAddress) public view returns (bool) {
      return shitTokens[tokenAddress];
    }
    
    function setGovernance(address _governance) public {
      require(msg.sender == governance, "!governance");
      governance = _governance;
    }

    function getRange() public view returns (uint[] memory){
      return rangeValue;
    }
}